openapi: 3.0.0
info:
  title: E-commerce API
  version: 1.0.0
  description: API documentation for the E-commerce application
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  security:
  - bearerAuth: []
paths:
  /api/auth/register:
    post:
      summary: Signup a new user
      description: |
        There are two kinds of users:
          1. user whose role is 'admin'
          2. user whose role is 'user'

        This API only creates users with role 'user'.

        By default, an admin user is created if not exists when a server is started.
        This is done for development purposes only. 

        Credentials of default admin user are:
          1. email - admin@admin.com
          2. password - admin
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name: 
                  type: string
              required:
                - email
                - name
                - password
              example:
                email: test@test.com
                password: test123
                name: test
      responses:
        201:
          description: New user created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                example:
                  success: true
                  token: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  /api/auth/login:
    post:
      summary: Login
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
              example:
                email: test@test.com
                password: test123
      responses:
        201:
          description: new jwt token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                example:
                  success: true
                  token: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  
  /api/users/profile:
    get:
      summary: Get user Profile
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User object of logged in user
    put:
      summary: Update user Profile
      description: Use to update email , name or password of the user which is logged in
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name: 
                  type: string
      responses:
        200:
          description: Updated user object

  /api/products:
    get:
      summary: Get a list of products
      security: []
      tags:
        - Products
      parameters:
        - name: search
          in: query
          description: Search term to filter products
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of products per page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 100
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: A list of products
    post:
      summary: Enter a new product in the data base (only admins can use this api)
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: number
      responses:
        '201': 
          description: New product object
  /api/products/{id}:
    get:
      summary: Get a product by ID
      security: []
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A product object
    put:
      summary: Update a product object (only admins can use this api)
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to update
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: number
      responses:
        '200':
          description: Updated product object

  /api/orders:
    get:
      summary: Get all orders
      description: | 
        • If the logged in user is an admin user , he/she can see all the orders

        • If the logged in user is not an admin user , he/she can see only those orders which belong to that user
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of products per page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 100
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        200:
          description: List of orders objects
    post:
      summary: Create a new order
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                      quantity:
                        type: number
              example:
                products: [{ "product": "product_id_1", "quantity": 2 } , { "product": "product_id_2", "quantity": 2 }]
      responses:
        201:
          description: Order created successfully , payment url and order id is sent. Use payment url to make payment    
  /api/orders/{id}:
    get:
      summary: Get order by ID
      description: |
        • Admin user will be able to see any order

        • If a regular user tries to see an order of some other user , he/she will get a 404 error
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Order ID
      responses:
        200:
          description: Order object
    put:
      summary: Update an existing order
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shippingAddress:
                  type: object
                  properties:
                    city:
                      type: string
                    country:
                      type: string
                    line1:
                      type: string
                    line2:
                      type: string
                    postal_code:
                      type: string
                    state:
                      type: string
                status:
                  type: string
                updates:
                  type: string
      responses:
        200:
          description: Return updated order object
  /api/orders/payment-success:
    get:
      summary: Handle payment success
      tags: [Orders]
      responses:
        200:
          description: Payment successful and order updated
        400:
          description: Invalid session ID
        404:
          description: Session not found
  /api/orders/cancel-order:
    get:
      summary: Handle order cancellation
      tags: [Orders]
      responses:
        200:
          description: Order canceled and stock updated
        400:
          description: Order cannot be canceled
        404:
          description: Order not found
